{"ast":null,"code":"var _jsxFileName = \"E:\\\\Code\\\\trustflight\\\\src\\\\components\\\\Game.js\";\nimport React, { Component } from 'react';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createGrid = () => {\n      let rows = this.state.rows;\n      let cols = this.state.cols;\n      let grid = new Array(rows); // This function creates an  2 dimensional array full with 'false' value or 'dead'\n\n      for (let i = 0; i < rows; i++) {\n        grid[i] = new Array(cols);\n\n        for (let j = 0; j < cols; j++) {\n          grid[i][j] = false;\n        }\n      }\n\n      this.setState({\n        grid: grid\n      });\n    };\n\n    this.handleDraw = (e, i, j) => {\n      let newGrid = this.state.grid;\n\n      if (e.target.classList.contains('alive')) {\n        e.target.classList.remove('alive');\n        newGrid[i][j] = false;\n      } else {\n        e.target.classList.add('alive');\n        newGrid[i][j] = true;\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handlePause = () => {\n      this.setState({\n        pause: true\n      });\n    };\n\n    this.handlePlay = () => {\n      this.setState({\n        pause: false\n      });\n      this.nextGeneration();\n    };\n\n    this.handelReset = () => {\n      let newRows = document.getElementById('rows_number').value;\n      let newCols = document.getElementById('cols_number').value;\n\n      if (newCols + newRows > 14) {\n        this.setState({\n          pause: false,\n          rows: newRows,\n          cols: newCols\n        });\n      } else {\n        if (newRows > 10) {\n          this.setState({\n            pause: false,\n            rows: newRows\n          });\n        } else {\n          if (newCols > 10) {\n            this.setState({\n              pause: false,\n              cols: newCols\n            });\n          }\n        }\n      }\n\n      this.createGrid();\n    };\n\n    this.nextGeneration = () => {\n      let rows = this.state.rows;\n      let cols = this.state.cols; // The birth of the new generation. \n\n      var newGrid = new Array(rows); // Copy the current generation into the new one.\n\n      for (let i = 0; i < rows; i++) {\n        newGrid[i] = new Array(cols);\n\n        for (let j = 0; j < cols; j++) {\n          newGrid[i][j] = this.state.grid[i][j];\n        }\n      } // Checking in the current generation\n\n\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          // Check for the number of alive neighbors\n          let counter = 0;\n\n          for (let x = -1; x < 2; x++) {\n            for (let y = -1; y < 2; y++) {\n              let row = i + x;\n              let col = j + y;\n\n              if (row < 0 || col < 0 || col > cols - 1 || row > rows - 1) {} else {\n                counter = counter + this.state.grid[row][col]; // each true counts as 1 and false as 0 so its a simple adding.\n              }\n            }\n          } // ! important \n          // I am subtracting the cell I analyse since the loop added it up.\n\n\n          counter = counter - this.state.grid[i][j]; // counter if\n          // This are the Game of Life Rules.\n          // Making changes in the new generation without affecting the old one.\n\n          if (counter === 3) {\n            newGrid[i][j] = true;\n          }\n\n          if (counter < 2) {\n            newGrid[i][j] = false;\n          }\n\n          if (counter > 3) {\n            newGrid[i][j] = false;\n          }\n        }\n      } // The new generation becomes the current generation stored in the state. \n\n\n      this.setState({\n        grid: newGrid\n      }); // Repeat each tenth of a second if not paused.\n\n      if (!this.state.pause) {\n        setTimeout(() => {\n          this.nextGeneration();\n        }, 100);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      pause: false,\n      rows: 10,\n      // the initial size the game will be loaded with.\n      cols: 10\n    };\n  }\n\n  // Create the grid  \n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, this.state.grid.map((value, index) => {\n      /* A map that returns a map to be able to loop through 2 dimensional arrays. */\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 32\n        }\n      }, this.state.grid[index].map((life, index2) => {\n        /* Checking if the cell is alive or not  */\n        if (life) {\n          return /*#__PURE__*/React.createElement(\"td\", {\n            key: index + '' + index2,\n            className: \"cell alive\",\n            onClick: e => this.handleDraw(e, index, index2),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 40\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(\"td\", {\n            key: index + '' + index2,\n            className: \"cell\",\n            onClick: e => this.handleDraw(e, index, index2),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 40\n            }\n          });\n        }\n      }));\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      defaultValue: \"10\",\n      id: \"rows_number\",\n      name: \"Rows number\",\n      min: \"10\",\n      max: \"100\",\n      step: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      defaultValue: \"10\",\n      id: \"cols_number\",\n      name: \"Cols number\",\n      min: \"10\",\n      max: \"100\",\n      step: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handelReset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handlePlay(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handlePause(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, \"Pause\")));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["E:/Code/trustflight/src/components/Game.js"],"names":["React","Component","Game","constructor","props","createGrid","rows","state","cols","grid","Array","i","j","setState","handleDraw","e","newGrid","target","classList","contains","remove","add","handlePause","pause","handlePlay","nextGeneration","handelReset","newRows","document","getElementById","value","newCols","counter","x","y","row","col","setTimeout","componentDidMount","render","map","index","life","index2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            grid: [],\r\n            pause: false,\r\n            rows: 10, // the initial size the game will be loaded with.\r\n            cols: 10,\r\n        };\r\n      }\r\n    createGrid = () => {        \r\n        let rows = this.state.rows \r\n        let cols = this.state.cols\r\n        let grid = new Array(rows)\r\n\r\n        // This function creates an  2 dimensional array full with 'false' value or 'dead'\r\n        for(let i = 0; i < rows; i++) {\r\n            grid[i] = new Array(cols)\r\n            for(let j = 0; j < cols; j++) {\r\n                grid[i][j] = false;\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid,\r\n        })\r\n    }\r\n\r\n    handleDraw = (e, i, j) => {\r\n\r\n        let newGrid = this.state.grid\r\n        \r\n        if (e.target.classList.contains('alive')) {\r\n            e.target.classList.remove('alive')\r\n            newGrid[i][j] = false\r\n        }else {\r\n            e.target.classList.add('alive')\r\n            newGrid[i][j] = true\r\n        }\r\n        this.setState({\r\n            grid: newGrid\r\n        })\r\n\r\n    }\r\n\r\n    handlePause = () => {\r\n        this.setState({\r\n            pause: true,\r\n        })\r\n    }\r\n\r\n    handlePlay = () => {\r\n        this.setState({\r\n            pause: false,\r\n        })\r\n        this.nextGeneration();\r\n    }\r\n\r\n    handelReset = () => {\r\n        let newRows = document.getElementById('rows_number').value;\r\n        let newCols = document.getElementById('cols_number').value;\r\n\r\n        if (newCols+newRows > 14 ) {\r\n            this.setState({\r\n                pause: false,\r\n                rows: newRows,\r\n                cols: newCols,\r\n            })\r\n        }else {\r\n            if (newRows > 10 ) {\r\n                this.setState({\r\n                    pause: false,\r\n                    rows: newRows,\r\n                })\r\n            } else {\r\n                if (newCols > 10 ) {\r\n                    this.setState({\r\n                        pause: false,\r\n                        cols: newCols,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        this.createGrid();\r\n    }\r\n\r\n    nextGeneration = () => {\r\n\r\n        let rows = this.state.rows \r\n        let cols = this.state.cols\r\n        \r\n        // The birth of the new generation. \r\n        var newGrid = new Array(rows);\r\n\r\n        // Copy the current generation into the new one.\r\n        for(let i = 0; i < rows; i++) {\r\n            newGrid[i] = new Array(cols);\r\n            for(let j = 0; j < cols; j++) {\r\n                newGrid[i][j] = this.state.grid[i][j]\r\n            }\r\n        }\r\n\r\n        // Checking in the current generation\r\n        for(let i = 0; i < rows; i++) {\r\n            for(let j = 0; j < cols; j++) {\r\n\r\n                // Check for the number of alive neighbors\r\n\r\n                let counter = 0\r\n               \r\n                for(let x = -1; x< 2; x++){\r\n                    for(let y = -1 ; y< 2; y++){\r\n                        let row = i+x;\r\n                        let col = j+y;\r\n                        if( row < 0 || col < 0 || col>cols-1 || row>rows-1) {\r\n\r\n                        }else{\r\n                            counter=counter + this.state.grid[row][col]\r\n                            // each true counts as 1 and false as 0 so its a simple adding.\r\n                        }\r\n                    }\r\n                }\r\n            \r\n                // ! important \r\n                // I am subtracting the cell I analyse since the loop added it up.\r\n                counter = counter - this.state.grid[i][j]\r\n\r\n                // counter if\r\n                // This are the Game of Life Rules.\r\n\r\n                // Making changes in the new generation without affecting the old one.\r\n                if (counter === 3){\r\n                    newGrid[i][j] = true\r\n                }\r\n                if (counter < 2 ){\r\n                    newGrid[i][j] = false\r\n                }\r\n                if (counter > 3) {\r\n                    newGrid[i][j] = false\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        // The new generation becomes the current generation stored in the state. \r\n        this.setState({\r\n            grid: newGrid,\r\n        })\r\n\r\n        // Repeat each tenth of a second if not paused.\r\n        if (!this.state.pause) {\r\n            setTimeout(() => { \r\n                this.nextGeneration() \r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    // Create the grid  \r\n    componentDidMount() {\r\n        this.createGrid();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n            {/* Creating a table to visualize the data and interact with the game, */}\r\n                <table >\r\n                <tbody>\r\n                    {this.state.grid.map((value, index) => {\r\n                        /* A map that returns a map to be able to loop through 2 dimensional arrays. */\r\n                        return <tr key={index}>{ this.state.grid[index].map((life, index2) => {\r\n                            /* Checking if the cell is alive or not  */\r\n                            if (life){\r\n                                return <td key={index+''+index2} className='cell alive' onClick={(e) => this.handleDraw(e, index, index2)}></td>\r\n                            }else{\r\n                                return <td key={index+''+index2} className='cell' onClick={(e) => this.handleDraw(e, index, index2)}></td>\r\n                            }\r\n                            \r\n                        })}</tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div>\r\n                    <input type='number' defaultValue='10' id=\"rows_number\" name=\"Rows number\" min=\"10\" max=\"100\" step='5' />\r\n                    <input type='number' defaultValue='10' id=\"cols_number\" name=\"Cols number\" min=\"10\" max=\"100\" step='5' />\r\n                    <button onClick={() => this.handelReset()}>Reset</button>\r\n                    <button onClick={() => this.handlePlay()}>Play</button>\r\n                    <button onClick={() => this.handlePause()}>Pause</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}